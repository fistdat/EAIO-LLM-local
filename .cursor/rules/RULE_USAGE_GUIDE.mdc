---
description:
globs:
alwaysApply: false
---
# Unified Cognitive Framework - Rule Usage Guide
**Version**: 1.0 | **Last Updated**: January 2025 | **Target**: Development Teams  

## Overview

This guide provides comprehensive instructions for effectively using the Unified Cognitive Framework rules to maximize development productivity, ensure business alignment, and deliver high-quality software solutions.

### Quick Reference Card
```yaml
rule_quick_reference:
  architecture_mode: üèóÔ∏è A.*
    triggers: [design, architecture, system, business, domain, model, erd, sequence]
    response: "üèóÔ∏è ARCHITECTURE MODE: Focusing on system design and business alignment..."
    output: .cursor/architecture/
    
  development_mode: ‚ö° T.*
    triggers: [implement, code, test, debug, fix, refactor, tdd]
    response: "‚ö° DEVELOPMENT MODE: Focusing on structured implementation and testing..."
    output: .cursor/tasks/
    
  hybrid_mode: üîÑ A.* + T.*
    triggers: [plan, feature, integrate, build, create, develop]
    response: "üîÑ HYBRID MODE: Coordinating design and implementation perspectives..."
    output: both architecture and tasks
```

## Practical Usage Scenarios

### Scenario 1: Starting a New Feature
**Context**: Product manager requests a new customer loyalty program

#### Step 1: Business Analysis (Architecture Mode)
```bash
# Prompt Example
"Design customer loyalty program system with business capability analysis, 
stakeholder mapping, and system architecture for e-commerce platform"

# Expected Response: üèóÔ∏è ARCHITECTURE MODE
# Generated Artifacts:
# - .cursor/architecture/business/capabilities.md
# - .cursor/architecture/business/stakeholders.md  
# - .cursor/architecture/data/conceptual_model.md
# - .cursor/architecture/application/components.md
```

#### Step 2: Implementation Planning (Development Mode)
```bash
# Prompt Example  
"Create implementation plan for customer loyalty program with sprint breakdown,
TDD approach, and task estimation using fibonacci points"

# Expected Response: ‚ö° DEVELOPMENT MODE
# Generated Artifacts:
# - .cursor/tasks/backlog/loyalty_program_backlog.md
# - .cursor/tasks/sprints/sprint_1_foundation.md
# - .cursor/tasks/specs/loyalty_test_specifications.md
```

#### Step 3: Coordinated Development (Hybrid Mode)
```bash
# Prompt Example
"Plan loyalty program MVP implementation with architecture design coordination
and development task synchronization for 2-week sprint delivery"

# Expected Response: üîÑ HYBRID MODE  
# Generated Artifacts:
# - Both architecture and task artifacts
# - Cross-reference mapping
# - Feasibility validation
```

### Scenario 2: Database Design Project
**Context**: Need to design database for customer data management

#### Architecture-First Approach
```bash
# Effective Prompt
"Design customer data architecture with ERD modeling, business entity analysis,
and PostgreSQL physical implementation for CRM system with 100K+ customers"

# Generated Structure:
# .cursor/architecture/data/
# ‚îú‚îÄ‚îÄ conceptual_model.md      # Business entities
# ‚îú‚îÄ‚îÄ logical_model.md         # Relationships & constraints  
# ‚îú‚îÄ‚îÄ physical_model.md        # PostgreSQL optimization
# ‚îî‚îÄ‚îÄ erd/                     # Visual diagrams
#     ‚îú‚îÄ‚îÄ conceptual_erd.mermaid
#     ‚îú‚îÄ‚îÄ logical_erd.mermaid
#     ‚îî‚îÄ‚îÄ physical_erd.mermaid
```

#### Quality Validation Checklist
```markdown
Post-Generation Validation:
- [ ] Business entities map to real business concepts
- [ ] Stakeholder value clearly articulated
- [ ] Performance requirements specified
- [ ] Integration points identified
- [ ] Data governance addressed
```

### Scenario 3: Code Quality Improvement
**Context**: Existing codebase needs quality improvement

#### Development Mode Application
```bash
# Effective Prompt
"Implement TDD refactoring for user authentication service with code quality
standards, comprehensive test coverage, and SOLID principles application"

# Generated Artifacts:
# - Test specifications with Red-Green-Refactor cycles
# - Code quality checklists
# - Refactoring task breakdown
# - Quality gate definitions
```

## Rule Activation Mastery

### Precise Trigger Word Usage

#### Architecture Mode Triggers
```yaml
primary_triggers:
  - design: "Design user management architecture"
  - architecture: "Create microservices architecture"  
  - system: "System design for payment processing"
  - business: "Business capability modeling"
  - domain: "Domain-driven design approach"
  - model: "Data model for customer entities"
  - erd: "ERD design for order management"
  - sequence: "Sequence diagram for checkout process"

context_amplifiers:
  - stakeholder: "with stakeholder analysis"
  - capability: "with business capability mapping"
  - integration: "with system integration planning"
  - platform: "with technology platform selection"
```

#### Development Mode Triggers
```yaml
primary_triggers:
  - implement: "Implement user registration feature"
  - code: "Code review standards establishment"
  - test: "Test strategy for payment service"
  - debug: "Debug performance issues in API"
  - fix: "Fix authentication security vulnerabilities"
  - refactor: "Refactor order processing logic"
  - tdd: "TDD approach for user validation"

context_amplifiers:
  - sprint: "with sprint planning"
  - agile: "with agile methodology"
  - quality: "with code quality standards"
  - coverage: "with test coverage requirements"
```

#### Hybrid Mode Triggers
```yaml
primary_triggers:
  - plan: "Plan customer onboarding feature"
  - feature: "Feature development coordination"
  - integrate: "Integrate design and implementation"
  - build: "Build notification system"
  - create: "Create analytics dashboard"
  - develop: "Develop checkout workflow"

coordination_amplifiers:
  - roadmap: "with implementation roadmap"
  - coordination: "with team coordination"
  - alignment: "with architecture alignment"
  - synchronization: "with development synchronization"
```

### Advanced Prompt Engineering

#### Multi-Context Prompts
```bash
# Business + Technical Context
"Design customer management system for SaaS platform (Architecture Mode)
with 500K+ users requiring 99.9% uptime, GDPR compliance, and microservices
architecture, then create implementation plan (Development Mode) with 
3-sprint delivery timeline using TDD and agile methodology"

# Expected: Hybrid Mode activation with comprehensive coverage
```

#### Constraint-Driven Prompts
```bash
# Resource Constraints
"Design analytics dashboard (Architecture Mode) for startup team of 3 developers
with $50K budget, 8-week timeline, using existing PostgreSQL database and
React frontend, then implement (Development Mode) with MVP approach"

# Expected: Pragmatic solutions within constraints
```

#### Scale-Specific Prompts
```bash
# Enterprise Scale
"Design enterprise customer data platform (Architecture Mode) for Fortune 500
company with 50M+ customers, multi-region deployment, strict compliance
requirements, then plan implementation (Development Mode) for 12-month
program with 20+ developers across 4 teams"

# Expected: Enterprise-grade architecture and program planning
```

## Business Alignment Best Practices

### Stakeholder Value Articulation
```markdown
# Template for Business Context
**Business Problem**: [Specific challenge being solved]
**Stakeholder Impact**: [Who benefits and how]  
**Success Metrics**: [Measurable outcomes]
**ROI Justification**: [Business case with numbers]

# Example
**Business Problem**: Customer support tickets increased 40% due to order tracking confusion
**Stakeholder Impact**: 
- Customers: Self-service order tracking reduces frustration
- Support team: 30% reduction in routine inquiries
- Business: $200K annual support cost savings
**Success Metrics**: 
- 50% reduction in tracking-related tickets
- 90% customer satisfaction with self-service
- <2 second order lookup response time
**ROI Justification**: $500K development cost vs $200K annual savings = 2.5 year payback
```

### Value Traceability Maintenance
```typescript
// Example Traceability Chain
interface ValueChain {
  businessGoal: "Reduce customer support costs by 30%";
  businessCapability: "Customer Self-Service";
  systemComponent: "Order Tracking Service";
  implementationTask: "Build order status API with real-time updates";
  successMeasure: "Support ticket reduction and customer satisfaction scores";
}

// Validation Questions
const traceabilityCheck = [
  "Does this technical component directly support a business capability?",
  "Can we measure the business impact of this implementation?",
  "Would stakeholders recognize value from this technical work?",
  "Is the complexity justified by the business benefit?"
];
```

## Quality Gate Implementation

### Pre-Work Quality Gates
```yaml
before_architecture_work:
  business_context_required:
    - stakeholder_identification: "Who are the primary and secondary stakeholders?"
    - problem_statement: "What specific business problem are we solving?"
    - success_criteria: "How will we measure success?"
    - constraints: "What limitations must we work within?"
    
  scope_definition:
    - system_boundaries: "What's included/excluded in this design?"
    - integration_points: "How does this connect to existing systems?"
    - performance_requirements: "What are the SLA and scalability needs?"
    - compliance_requirements: "What regulatory/security constraints apply?"

before_development_work:
  requirements_clarity:
    - acceptance_criteria: "What does 'done' look like?"
    - business_rules: "What business logic must be implemented?"
    - user_experience: "How should users interact with this?"
    - error_scenarios: "What should happen when things go wrong?"
    
  technical_readiness:
    - architecture_alignment: "How does this fit the overall architecture?"
    - dependency_identification: "What do we need from other teams/systems?"
    - test_strategy: "How will we validate this works correctly?"
    - deployment_plan: "How will this reach production safely?"
```

### Post-Work Quality Gates
```yaml
architecture_validation:
  business_alignment_check:
    - value_proposition_clear: "Is business value clearly articulated?"
    - stakeholder_validation: "Have stakeholders confirmed this meets their needs?"
    - success_metrics_defined: "Can we measure if this succeeds?"
    
  technical_quality_check:
    - scalability_addressed: "Will this handle expected growth?"
    - integration_feasible: "Can this actually be built and integrated?"
    - maintainability_considered: "Can teams support this long-term?"

development_validation:
  implementation_quality_check:
    - acceptance_criteria_met: "Does implementation match requirements?"
    - test_coverage_adequate: "Are all scenarios properly tested?"
    - code_quality_standards_met: "Does code meet quality standards?"
    
  business_value_validation:
    - demonstrable_to_stakeholders: "Can we show this to business users?"
    - metrics_improvable: "Will this move the needle on business metrics?"
    - user_adoption_planned: "How will users discover and adopt this?"
```

## Team Adoption Strategies

### Individual Developer Adoption
```markdown
# Week 1: Foundation
- [ ] Read cognitive framework documentation
- [ ] Install rules in Cursor
- [ ] Practice with simple prompts
- [ ] Understand mode detection

# Week 2: Application  
- [ ] Use Architecture Mode for design tasks
- [ ] Use Development Mode for coding tasks
- [ ] Practice business context articulation
- [ ] Apply quality gates to work

# Week 3: Integration
- [ ] Use Hybrid Mode for feature work
- [ ] Integrate with existing workflows
- [ ] Share patterns with team
- [ ] Collect feedback for improvement

# Week 4: Mastery
- [ ] Advanced prompt engineering
- [ ] Cross-domain traceability
- [ ] Quality coaching for team
- [ ] Contribute to rule evolution
```

### Team Integration Approach
```yaml
phase_1_pilot:
  duration: 2_weeks
  participants: 2_senior_developers
  focus: rule_validation_and_refinement
  deliverables: [usage_patterns, effectiveness_assessment]
  
phase_2_expansion:
  duration: 4_weeks  
  participants: full_development_team
  focus: workflow_integration_and_training
  deliverables: [team_standards, best_practices_documentation]
  
phase_3_optimization:
  duration: 2_weeks
  participants: entire_product_team
  focus: cross_functional_alignment
  deliverables: [process_optimization, success_metrics]
```

### Organizational Rollout
```markdown
# Organizational Change Management

## Leadership Alignment
- [ ] Executive briefing on business value
- [ ] ROI projection for framework adoption
- [ ] Success metrics definition
- [ ] Resource allocation approval

## Team Preparation
- [ ] Architecture team training on business alignment
- [ ] Development team training on structured implementation
- [ ] Product team training on value articulation
- [ ] Cross-functional workshop on traceability

## Infrastructure Setup
- [ ] Standardized Cursor configuration
- [ ] Shared memory system setup
- [ ] Quality gate automation
- [ ] Reporting dashboard creation

## Success Measurement
- [ ] Baseline metrics collection
- [ ] Regular progress reviews
- [ ] Continuous improvement processes
- [ ] Knowledge sharing sessions
```

## Troubleshooting Guide

### Common Issues and Solutions

#### Issue: Mode Not Activating Correctly
```markdown
**Symptoms**: Wrong mode activated or unclear response

**Root Causes**:
- Ambiguous trigger words
- Missing business context
- Overly complex prompts

**Solutions**:
1. Use specific trigger words from rule documentation
2. Include clear business context upfront
3. Break complex requests into focused prompts
4. Explicitly request mode activation if needed

**Examples**:
‚ùå "Help with user stuff"
‚úÖ "Design user authentication system with security analysis" (Architecture)
‚úÖ "Implement user login with TDD approach" (Development)
```

#### Issue: Insufficient Business Context
```markdown
**Symptoms**: Generic technical solutions without stakeholder value

**Root Causes**:
- Technology-first thinking
- Missing stakeholder analysis
- Unclear business objectives

**Solutions**:
1. Always start with business problem statement
2. Identify specific stakeholders and their needs
3. Define measurable success criteria
4. Validate solutions against business value

**Template**:
"Business Context: [problem statement]
Stakeholders: [who benefits]
Success Metrics: [how to measure]
Technical Request: [what to build]"
```

#### Issue: Quality Gates Not Being Applied
```markdown
**Symptoms**: Inconsistent quality, missing validation steps

**Root Causes**:
- Skipping validation checklists
- Time pressure overriding quality
- Unclear quality standards

**Solutions**:
1. Integrate quality gates into workflow
2. Use automated quality checks where possible
3. Make quality gate completion visible
4. Celebrate quality achievements

**Implementation**:
- Pre-commit hooks for basic quality
- Pull request templates with quality checklist
- Definition of Done criteria enforcement
- Regular quality retrospectives
```

## Advanced Usage Patterns

### Pattern 1: Architecture Evolution
```bash
# Initial Architecture
"Design initial customer management system for startup with 1K users"

# Growth-Oriented Evolution  
"Evolve customer management architecture for 100K users with microservices
migration, performance optimization, and scalability planning"

# Enterprise Transformation
"Transform customer management into enterprise platform supporting 10M+ users
with multi-tenant architecture, global deployment, and regulatory compliance"
```

### Pattern 2: Technical Debt Management
```bash
# Assessment Phase
"Analyze technical debt in legacy order processing system with refactoring
recommendations, business impact analysis, and modernization roadmap"

# Strategic Planning
"Plan technical debt reduction program for order processing with business
value prioritization, risk assessment, and incremental improvement strategy"

# Implementation
"Implement technical debt reduction for order processing with TDD refactoring,
quality gate enforcement, and progress tracking methodology"
```

### Pattern 3: Cross-Team Coordination
```bash
# Multi-Team Feature
"Plan customer notification feature requiring frontend (React), backend (Node.js),
and data (PostgreSQL) teams with cross-team coordination, dependency management,
and delivery synchronization"

# Integration Architecture
"Design API integration architecture for customer, order, and payment services
with team boundary definition, contract specification, and rollout strategy"
```

## Success Measurement

### Individual Productivity Metrics
```yaml
developer_productivity:
  code_quality:
    - defect_rate_reduction: target_50_percent_improvement
    - code_review_efficiency: target_30_percent_faster
    - technical_debt_reduction: target_25_percent_decrease
    
  delivery_speed:
    - feature_delivery_time: target_20_percent_improvement
    - bug_fix_cycle_time: target_40_percent_reduction
    - deployment_frequency: target_2x_increase
    
  business_alignment:
    - stakeholder_satisfaction: target_4_5_out_of_5
    - business_value_delivery: target_measurable_outcomes
    - requirement_clarity: target_90_percent_first_time_right
```

### Team Effectiveness Metrics
```yaml
team_performance:
  collaboration:
    - cross_functional_alignment: improved_communication_scores
    - shared_understanding: reduced_requirement_changes
    - knowledge_sharing: increased_documentation_quality
    
  quality:
    - customer_reported_defects: target_60_percent_reduction
    - system_reliability: target_99_9_percent_uptime
    - performance_standards: all_sla_targets_met
    
  innovation:
    - architectural_improvements: documented_pattern_evolution
    - process_optimization: continuous_improvement_adoption
    - technology_advancement: strategic_modernization_progress
```

### Organizational Impact Metrics
```yaml
business_outcomes:
  customer_satisfaction:
    - user_experience_scores: target_improvement
    - feature_adoption_rates: measured_usage_analytics
    - customer_support_reduction: quantified_cost_savings
    
  business_value:
    - revenue_impact: traceable_to_technical_delivery
    - cost_optimization: measured_efficiency_gains
    - market_competitiveness: feature_time_to_market
    
  operational_excellence:
    - system_reliability: uptime_and_performance_metrics
    - security_posture: compliance_and_audit_results
    - scalability_readiness: growth_capacity_planning
```

---

**This guide provides comprehensive strategies for maximizing the effectiveness of the Unified Cognitive Framework in real-world development scenarios. Regular reference to these patterns and practices will ensure optimal business value delivery through structured, quality-focused development processes.**
